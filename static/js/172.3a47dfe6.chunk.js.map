{"version":3,"file":"static/js/172.3a47dfe6.chunk.js","mappings":"0JAIe,MAAMA,EAGjB,YAAMC,CAAOC,GACT,MAAMC,EAAiBD,EAAOE,WACxBC,EAAeC,KAAKC,MAAMD,KAAKE,UAAUN,EAAOO,MAAMC,QACtDC,EAAOT,EAAOS,KACdC,EAAOV,EAAOU,KAEpB,IACI,MAAMC,GAAgBT,EAAAA,EAAAA,IAAWU,EAAAA,EAAWX,GAC5C,IAAIY,EAAmB,GAGnBV,IACAU,EAAmBC,KAAKC,kBAAkBZ,IAG9C,MAAMa,QAAsBC,EAAAA,EAAAA,KAAQT,EAAAA,EAAAA,IAAMG,KAAkBE,IAC5D,IAAIK,EAAU,GAEdF,EAAcG,SAASC,IACnB,MAAMC,EAAWD,EAAIE,OACrBJ,EAAQK,KAAKF,EAAS,IAG1BZ,EAAKS,EACT,CAAE,MAAOM,GACLd,EAAKc,EACT,CACJ,CACA,YAAMC,CAAOzB,GACT,MAAMC,EAAiBD,EAAOE,WACxBwB,EAAa1B,EAAOsB,KACpBK,EAAQD,EAAgB,IACxBE,GAASR,EAAAA,EAAAA,IAAIR,EAAAA,EAAWX,EAAgB0B,GACxClB,EAAOT,EAAOS,KACdC,EAAOV,EAAOU,KAEpB,UACUmB,EAAAA,EAAAA,IAAejB,EAAAA,GAAWkB,UAG5B,WADuBC,EAAYC,IAAIJ,IACzBK,SACV,KAAM,4CAIVF,EAAYG,OAAON,EAAQxB,KAAKC,MAAMD,KAAKE,UAAUoB,IAAa,IAItEjB,GAAK,EACT,CAAE,MAAOe,GAELd,EAAKc,EACT,CACJ,CAIAT,iBAAAA,CAAkBZ,GACd,MAAMgC,EAAY,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACrD,IAAItB,EAAmB,GAEvB,IAAK,IAAIuB,KAASjC,EACd,GAAIA,EAAakC,eAAeD,GAAQ,CACpC,IAAIE,EAAYnC,EAAaiC,GAC7B,GAAyB,kBAAdE,GAA4D,IAAlCC,OAAOC,KAAKF,GAAWG,OAAc,CACtE,MAAMC,EAAWH,OAAOC,KAAKF,GAAW,GAClCK,EAAQL,EAAUI,GACpBP,EAAUS,SAASF,IACnB7B,EAAiBU,MAAKhB,EAAAA,EAAAA,IAAM6B,EAAOM,EAAUC,GAErD,MACI9B,EAAiBU,MAAKhB,EAAAA,EAAAA,IAAM6B,EAAO,KAAME,GAEjD,CAEJ,OAAOzB,CACX,E,oEC7EJ,MA2BA,GA3BsBgC,EAAAA,EAAAA,IACjBf,UACK,IACKgB,EAAAA,EAAmBC,oBAAoBC,EAAS,OAChDF,EAAAA,EAAmBC,oBAAoBC,EAAS,OAEhD,IAAIC,EAAQ,IAAIC,EAAAA,EAYhB,aAT2B,IAAIC,SAAQ,CAACC,EAASC,KAC5CJ,EAAMxB,OAAO,CACRvB,WAAY,QACZoB,KAAM0B,EACNvC,KAAM2C,EACN1C,KAAM2C,GACT,GAKZ,CAAE,MAAO7B,GAEJ,MADA8B,QAAQ9B,MAAM,mBAAoBA,GAC5BA,CACX,I","sources":["Pocket/PocketFirestore.js","Service/UpdateUserAge.jsx"],"sourcesContent":["import { collection, getDocs, updateDoc, query, where, doc, runTransaction } from 'firebase/firestore';\r\n\r\nimport { firestore } from '../firestoreAccount.js';\r\n\r\nexport default class FirestoreManager {\r\n    // ...\r\n\r\n    async Search(params) {\r\n        const collectionName = params.collection;\r\n        const whereFilters = JSON.parse(JSON.stringify(params.where.query));\r\n        const done = params.done;\r\n        const fail = params.fail;\r\n\r\n        try {\r\n            const collectionRef = collection(firestore, collectionName);\r\n            let queryConstraints = [];\r\n\r\n            // where filtrelerini uygula\r\n            if (whereFilters) {\r\n                queryConstraints = this.applyWhereFilters(whereFilters);\r\n            }\r\n\r\n            const querySnapshot = await getDocs(query(collectionRef, ...queryConstraints));\r\n            let results = [];\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const userData = doc.data();\r\n                results.push(userData);\r\n            });\r\n\r\n            done(results);\r\n        } catch (error) {\r\n            fail(error);\r\n        }\r\n    }\r\n    async Update(params) {\r\n        const collectionName = params.collection;\r\n        const updateData = params.data;\r\n        const docId = updateData[\"_id\"]; // Güncellenecek dokümanın ID'si\r\n        const docRef = doc(firestore, collectionName, docId);\r\n        const done = params.done;\r\n        const fail = params.fail;\r\n\r\n        try {\r\n            await runTransaction(firestore, async (transaction) => {\r\n                // Dokümanı oku (isterseniz)\r\n                const snapshot = await transaction.get(docRef);\r\n                if (!snapshot.exists()) {\r\n                    throw \"Transaction aborted rollback successfully\";\r\n                }\r\n\r\n                // Güncelleme işlemini yap\r\n                transaction.update(docRef, JSON.parse(JSON.stringify(updateData)));\r\n            });\r\n\r\n            // İşlem başarılı\r\n            done(true);\r\n        } catch (error) {\r\n            // Hata oluştu\r\n            fail(error);\r\n        }\r\n    }\r\n\r\n    // ...\r\n\r\n    applyWhereFilters(whereFilters) {\r\n        const operators = ['>', '<', '>=', '<=', '==', '!=', 'in']; // Desteklenen operatörler\r\n        let queryConstraints = [];\r\n\r\n        for (let field in whereFilters) {\r\n            if (whereFilters.hasOwnProperty(field)) {\r\n                let condition = whereFilters[field];\r\n                if (typeof condition === 'object' && Object.keys(condition).length === 1) {\r\n                    const operator = Object.keys(condition)[0];\r\n                    const value = condition[operator];\r\n                    if (operators.includes(operator)) {\r\n                        queryConstraints.push(where(field, operator, value));\r\n                    }\r\n                } else {\r\n                    queryConstraints.push(where(field, '==', condition));\r\n                }\r\n            }\r\n        }\r\n        return queryConstraints;\r\n    }\r\n\r\n}\r\n","// services/GetUserDocs.js\r\nimport PocketFirestore from '../Pocket/PocketFirestore';\r\nimport PocketLocalService,{execute} from '../Pocket/PocketLocalService';\r\n/**\r\n *\r\n * @param {Pocket} criteria\r\n */\r\nconst UpdateUserAge = execute(\r\n     async (criteria) => {\r\n          try {\r\n               PocketLocalService.parameterMustBeFill(criteria,\"_id\");\r\n               PocketLocalService.parameterMustBeFill(criteria,\"age\");\r\n\r\n               let dbRef = new PocketFirestore();\r\n\r\n               // dbRef.Search işlemini bir Promise içinde sar\r\n               const updateResult = await new Promise((resolve, reject) => {\r\n                    dbRef.Update({\r\n                         collection: \"Users\",\r\n                         data: criteria,\r\n                         done: resolve, // Başarılı sonuç için resolve fonksiyonunu kullan\r\n                         fail: reject  // Hata durumu için reject fonksiyonunu kullan\r\n                    });\r\n               });\r\n\r\n               return updateResult;\r\n\r\n          } catch (error) {\r\n               console.error('UpdateUser hata:', error);\r\n               throw error;\r\n          }\r\n     }\r\n)\r\n\r\nexport default UpdateUserAge;\r\n"],"names":["FirestoreManager","Search","params","collectionName","collection","whereFilters","JSON","parse","stringify","where","query","done","fail","collectionRef","firestore","queryConstraints","this","applyWhereFilters","querySnapshot","getDocs","results","forEach","doc","userData","data","push","error","Update","updateData","docId","docRef","runTransaction","async","transaction","get","exists","update","operators","field","hasOwnProperty","condition","Object","keys","length","operator","value","includes","execute","PocketLocalService","parameterMustBeFill","criteria","dbRef","PocketFirestore","Promise","resolve","reject","console"],"sourceRoot":""}